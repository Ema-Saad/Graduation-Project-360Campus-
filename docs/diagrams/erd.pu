@startuml

together {
    () person_type

    entity Person {
        person_id int
        person_name varchar
        person_email varchar
        person_college varchar
        person_department varchar
        person_type char
    }

    entity Professor {
        person_id int
        prof_id int
    }

    entity Student {
        person_id int
        student_id: int 
    }

    entity TeachingAssistant {
        person_id int
        ta_id int
    }

    entity Admin {
        person_id int
        admin_id int
    }
}

entity Course {
    course_id: int 
    admin_id: int 
    course_title: varchar 
    course_description: text 
    course_prerequisite_id: int 
    course_created_at: datetime 
    course_updated_at: datetime 
}

entity Material {
    material_id: int  
    course_id: int 
    material_year: int 
    material_type: varchar 
    material_file_path: varchar 
    material_description: text 
}

entity Lecture {
    lecture_id int  
    course_id int 
    lecture_title varchar 
    lecture_date datetime 
    lecture_duration int 
}

entity Lab {
    lab_id int  
    course_id int 
    lab_title varchar 
    lab_date datetime 
    lab_duration int 
}

entity Tutorial {
    tutorial_id int  
    course_id int 
    tutorial_title varchar 
    tutorial_date datetime 
    tutorial_duration int 
}

entity Assignment {
    course_id int 
    assignment_id int  
    assignment_title varchar 
    assignment_description text 
    assignment_due_date datetime 
    assignment_submitted boolean 
}

entity Absence {
    absence_id int 
    enrollment_id int
    absence_date datetime
    absence_status varchar 
}

entity Event {
    event_id int 
    event_title varchar
    event_description text
    event_date datetime
    ' event_created_by int TODO: Is that an admin's ID ?
}

entity Enrollment {
    student_id int 
    course_id int 
    enrollment_enrolled_at datetime
    enrollment_grade float
    enrollment_feedback text
    enrollment_created_at timestamp 
}

entity Chatroom {
    course_id int 
    chatroom_id int 
    chatroom_title varchar 
    chatroom_created_at datetime
}

entity Message {
    chatroom_id int 
    message_id int 
    message_sender_id int 
    message_content text
    message_sent_at datetime
}

entity Submission {
    assignment_id int 
    submission_id int 
    student_id int 
    submission_file_path varchar
    submission_submitted_at datetime
}


entity EventRegistration {
    event_id int 
    student_id int 
    registered_at datetime
}

entity StaffPerformance {
    performance_id int [pk]
    staff_id int 
    course_id int 
    ' Professor, TA
    staff_prof_role varchar(10) 
    ' e.g., based on student feedback or other metrics
    staff_prof_evaluation_score float 
    staff_prof_feedback text
    staff_prof_created_at timestamp 
}

entity Report {
    report_id int 
    report_title varchar
    report_content text
    ' 0 for student, 1 for staff
    report_generated_by_type int
    ' This requires a specialisation hierarchy
    ' report_generated_by_id int [ref: > Staff.id, ref: > Student.id]// Refers to either student_id or staff_id based on type
    report_generated_date datetime
    report_data json
}

entity GraduationProject {
    project_id int 
    project_name varchar(100)
    project_description text
    student_id int 
    project_supervised_by int 
    project_final_grade varchar
    project_created_at timestamp 
}


' TODO: Decide on that
' entity Timetable {
'     timetable_id int 
'     course_id int [ref: < Course.id]
'     instructor_id int [ref: < Staff.id]
'     room_id int [ref: < Rooms.room_id]
'     timeslot_id int [ref: < Timeslots.timeslot_id]
'     timetable_section_id int
'     timetable_created_at timestamp 
' }
' 
' Table Timeslots {
' timeslot_id int [pk]
' start_time time
'     end_time time
'     day varchar(10) // Monday, Tuesday, etc.
' }
' 
' Table Rooms {
' room_id int [pk]
' room_name varchar(50)
' capacity int
' equipment json
' }

skinparam linetype ortho


Person -- person_type
person_type -- "S" Student
person_type -- "P" Professor
person_type - "T" TeachingAssistant
person_type - "A" Admin

Student -[hidden]> Professor
Professor -[hidden]> TeachingAssistant
TeachingAssistant -[hidden]> Admin

Student }o--|| EventRegistration
Student ||--o{ Submission
Student ||--o{ Message
Student }|--|| GraduationProject
Professor ||---|{ GraduationProject
Professor ||---o{ Enrollment
Professor ||---o{ StaffPerformance
Professor ||---o{ Material
Course "prerequiste" }o----|| "course" Course: requires
Course ||---o{ Enrollment
Course ||----o{ Assignment
Course ||----o{ Tutorial
Course ||-----|{ Lab
Course ||-----|{ Lecture
Course ||------o{ Material
Course ||------o{ StaffPerformance
TeachingAssistant ||----|{ Tutorial
Enrollment ||---o{ Submission
Enrollment ||---o{ Absence
Event }o---|| EventRegistration
Message }o---|| Chatroom
Assignment ||----o{ Submission
Person }o-|| Report
Chatroom ||-|| Course


@enduml
